# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  docker: circleci/docker@1
  node: circleci/node@4
  php: circleci/php@1
  sonarcloud: sonarsource/sonarcloud@1

# Orchestrate or schedule a set of jobs
jobs:

  build-phar:
    resource_class: small
    executor:
      name: php/default
      tag: "7.4"
    steps:
      - checkout
      - php/install-composer
      - php/install-packages
      - run: composer run-script lint
      - run: composer run-script check-format
      - run: rm -rvf vendor
      - php/install-packages:
          install-flags: "--no-interaction --prefer-dist --no-dev"
      - run: curl -o phar-composer -JL "https://github.com/clue/phar-composer/releases/download/v1.2.0/phar-composer-1.2.0.phar"
      - run:
          name: Build phar
          command: |
            php ./phar-composer --version
            php ./phar-composer build .
      - persist_to_workspace:
          root: ./
          paths:
            - video-converter.phar
      - store_artifacts:
          path: video-converter.phar

  build-docker:
    resource_class: medium
    environment:
      DEBIAN_FRONTEND: noninteractive
    executor: docker/machine
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Move phar to docker dir
          command: cp -v /tmp/workspace/video-converter.phar ./
      - run:
          name: Custom enviroment variables
          command: |
            export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt)
            echo "export PRIMARY_DOCKER_TAG=${PRIMARY_DOCKER_TAG}" >> ${BASH_ENV}
            export CACHE_FROM_IMAGES=$(grep "^FROM " Dockerfile.parent | sed 's/FROM //g' | sed 's/ AS .*$//g')
            if ! [[ "<< pipeline.git.branch >>" =~ (main|release-.*|dev) ]]; then
              export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}:dev"
            fi
            export TEST_CACHE_FROM_IMAGES=$(grep "^FROM " tests/Dockerfile | sed 's/FROM //g' | sed 's/AS.*$//g')
            if ! [[ "<< pipeline.git.branch >>" =~ (main|release-.*|dev) ]]; then
              export TEST_CACHE_FROM_IMAGES="${TEST_CACHE_FROM_IMAGES},${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}:test-dev"
            fi
            export DOCKER_TAGS=${PRIMARY_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}:${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},main,latest"
            fi
            echo "export CACHE_FROM_IMAGES=${CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            echo "export TEST_CACHE_FROM_IMAGES=${TEST_CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: $DOCKER_REGISTRY
      - docker/build:
          step-name: Build parent image
          dockerfile: Dockerfile.parent
          image: ${CIRCLE_PROJECT_REPONAME}-parent
          tag: latest
          registry: ${DOCKER_REGISTRY}
          cache_from: ${CACHE_FROM_IMAGES}
      - run:
          name: Tag parent docker
          command: docker tag ${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}-parent:latest ${CIRCLE_PROJECT_REPONAME}-parent
      - docker/build:
          step-name: Build docker image
          image: ${CIRCLE_PROJECT_REPONAME}
          tag: ${DOCKER_TAGS}
          registry: ${DOCKER_REGISTRY}
      - docker/push:
          step-name: Pushing image
          registry: $DOCKER_REGISTRY
          image: ${CIRCLE_PROJECT_REPONAME}
          tag: ${DOCKER_TAGS}
      - run:
          name: Tag docker
          command: docker tag ${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}:${PRIMARY_DOCKER_TAG} ${CIRCLE_PROJECT_REPONAME}
      - docker/build:
          step-name: Build test image
          docker-context: .
          path: .
          dockerfile: tests/Dockerfile
          image: ${CIRCLE_PROJECT_REPONAME}
          tag: test-${PRIMARY_DOCKER_TAG}
          registry: ${DOCKER_REGISTRY}
          cache_from: ${TEST_CACHE_FROM_IMAGES}
          extra_build_args: --build-arg TEST_SAMPLE_DOMAIN=${TEST_SAMPLE_DOMAIN}
      - unless:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - docker/push:
                step-name: Pushing test image
                registry: $DOCKER_REGISTRY
                image: ${CIRCLE_PROJECT_REPONAME}
                tag: test-${PRIMARY_DOCKER_TAG}
      - run:
          name: Export test image to tar
          command: |
            docker save -o video-converter-test.tar ${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}:test-${PRIMARY_DOCKER_TAG}
      - persist_to_workspace:
          root: ./
          paths:
            - video-converter-test.tar*

  test-docker:
    resource_class: medium
    parallelism: 2
    environment:
      DEBIAN_FRONTEND: noninteractive
    executor: docker/machine
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Load docker test image
          command: |
            docker load -i /tmp/workspace/video-converter-test.tar
      - run:
          name: Run tests
          command: |
            export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt)
            if [[ "<< pipeline.git.branch >>" != "main" ]]; then
              export ADDITIONAL_PHPUNIT_ARGS="--fail-on-warning --fail-on-risky";
            fi
            export TEST_IMAGE=${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}:test-${PRIMARY_DOCKER_TAG}
            export ALL_CLASSES=$(docker run --rm -it ${TEST_IMAGE} --list-tests | grep "^ -" | sed 's/ - \(.*\)::.*/\1/g' | uniq)
            export CLASSES=$(echo "${ALL_CLASSES}" | circleci tests split --split-by=timings --timings-type=classname)
            printf "All Classes=%s\n\nRunning with=%s\n\n" "${ALL_CLASSES}" "${CLASSES}"
            if [[ $(echo ${ALL_CLASSES} | wc -w) -eq 0 ]]; then
              echo "Not enough classes. Something's wrong"
              exit 1
            fi
            ./test.sh
            cp -v testResults/clover.xml testResults/clover-${CIRCLE_NODE_INDEX}.xml
            cp -v testResults/junit.xml testResults/junit-${CIRCLE_NODE_INDEX}.xml
      - store_test_results:
          path: testResults
      - store_artifacts:
          path: testResults
      - persist_to_workspace:
          root: testResults
          paths:
            - clover-*.xml
            - junit-*.xml

  sonar-scan:
    executor: 
      name: node/default
      tag: '16.5.0'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Correct report files
          command: |
            find . -name 'clover-*.xml' -type f -exec sed -i 's#/opt/video-converter/##g' {} \;
            find . -name 'clover-*.xml' -type f -exec cat {} \;
            npm install --include=dev junit-report-merger
            npx jrm junit.xml "junit-*.xml"
            cat junit.xml
      - store_artifacts:
          path: junit.xml
      - store_artifacts:
          path: clover-*.xml
      - store_artifacts:
          path: clover-0.xml
      - run:
          name: Configure sonar-project.properties
          command: |
            printf "sonar.php.coverage.reportPaths=%s\n" $(find . -name 'clover-*.xml' -type f | xargs echo | sed 's/ /,/g') >> sonar-project.properties
            cat sonar-project.properties
      - sonarcloud/scan

  release:
    resource_class: small
    docker:
      - image: circleci/node
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    steps:
      - checkout
      - run: npm install -D @semantic-release/exec
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            run:
              name: Define additional args
              command: |
                echo "ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          name: Semantic-release
          command: |
            npx semantic-release ${ADDITIONAL_ARGS}
            if [[ "" == "$(cat version.txt)" ]]; then 
              printf "%s-%s" ${CIRCLE_BRANCH} ${CIRCLE_SHA1:0:7} | sed 's#/#-#g' > /tmp/workspace/full_version.txt
              printf "${CIRCLE_BRANCH}" | sed 's#/#-#g' > /tmp/workspace/short_version.txt
            else
              cp -v version.txt /tmp/workspace/full_version.txt
              cp -v version.txt /tmp/workspace/short_version.txt
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - full_version.txt
            - short_version.txt

workflows:
  cicd:
    jobs:
      - release:
          name: pre-release
          context: default
          prerelease: true
      - build-phar:
          context: default
      - docker/hadolint:
          name: validate-dockerfile
          context: default
      - build-docker:
          context: default
          requires:
            - pre-release
            - validate-dockerfile
            - build-phar
      - test-docker:
          context: default
          requires:
            - pre-release
            - build-docker
      - sonar-scan:
          context: default
          requires:
            - test-docker
      - release:
          name: release
          context: default
          prerelease: false
          requires:
            - build-docker
            - test-docker
            - sonar-scan
          filters:
            branches:
              only:
                - main
