# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
    docker: circleci/docker@1.5.0

# Orchestrate or schedule a set of jobs
jobs:
  build-ripvideo:
    parameters:
      from-tag: 
        type: string
      dockerfile:
        type: string
      build-subtitle:
        type: boolean
    environment:
      DOCKERFILE: << parameters.dockerfile >>
      FROM_TAG: << parameters.from-tag >>
      BUILD_SUBTITLE_SUPPORT: << parameters.build-subtitle >>
    machine: true
    steps:
      - run:
          name: Custom enviroment variables
          command: |
            #if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            #  echo 'export THIS_LABEL=${FROM_TAG}' >> ${BASH_ENV}
            #else 
            #  echo 'export THIS_LABEL=${FROM_TAG}-${CIRCLE_BRANCH}' >> ${BASH_ENV}
            #fi
            echo 'export BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:build' >> ${BASH_ENV}
            if [[ ! "${CIRCLE_BRANCH}" == "master" ]] && [[ ! ${CIRCLE_BRANCH} == v* ]]; then
              echo 'export CACHE_FROM_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:${FROM_TAG}' >> ${BASH_ENV}
            fi
            echo 'export FROM_IMAGE=jrottenberg/ffmpeg:${FROM_TAG}' >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          docker-username: THIS_REGISTRY_USERNAME
          docker-password: THIS_REGISTRY_PASSWORD
          registry: $THIS_REGISTRY
      - docker/pull:
          images: ${FROM_IMAGE},${CACHE_FROM_IMAGE}
          ignore-docker-pull-error: true
      - checkout
      - run:
          name: Build docker image
          command: |
            ./build.sh
            docker save -o rip-video.tar ${BUILD_IMAGE}
      - persist_to_workspace:
          root: .
          paths: 
            - rip-video.tar
#      - docker/push:
#          registry: $THIS_REGISTRY
#          image: ${THIS_IMAGE}
#          tag: ${THIS_LABEL}

  build-test:
#    parameters:
#      from-tag:
#        type: string
#    environment:
#      FROM_TAG: << parameters.from-tag >>
    machine: true
    steps:
      - run:
          name: Custom enviroment variables
          command: |
            #if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            #  echo 'export THIS_LABEL=${FROM_TAG}' >> ${BASH_ENV}
            #else 
            #  echo 'export THIS_LABEL=${FROM_TAG}-${CIRCLE_BRANCH}' >> ${BASH_ENV}
            #fi
            #echo 'export BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:${THIS_LABEL}' >> ${BASH_ENV}
            echo 'export BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:build' >> ${BASH_ENV}
            echo 'export TEST_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}-test:build' >> ${BASH_ENV}
            #echo 'export FROM_IMAGE=jrottenberg/ffmpeg:${FROM_TAG}' >> ${BASH_ENV}
            #cat ${BASH_ENV}
#      - docker/check:
#          docker-username: THIS_REGISTRY_USERNAME
#          docker-password: THIS_REGISTRY_PASSWORD
#          registry: $THIS_REGISTRY
#      - docker/pull:
#          images: ${FROM_IMAGE},${BUILD_IMAGE}
#          ignore-docker-pull-error: false
      - checkout
      - attach_workspace:
         at: .
      - run:
         name: Load build image
         command: docker load -i rip-video.tar
      - docker/build:
          docker-context: tests/
          path: tests/
          image: ${THIS_IMAGE}-test
 #         tag: ${THIS_LABEL}
          tag: build
          #extra_build_args: --build-arg BUILD_IMAGE=${BUILD_IMAGE}
          extra_build_args: --build-arg BUILD_IMAGE=${BUILD_IMAGE}
          registry: ${THIS_REGISTRY}
          step-name: Build test image
#      - docker/push:
#          registry: $THIS_REGISTRY
#          image: ${THIS_IMAGE}-test
#          tag: ${THIS_LABEL}
      - run:
         name: Extract test image
         command: docker save -o rip-video-test.tar ${TEST_IMAGE}
      - persist_to_workspace:
          root: .
          paths:
            - rip-video-test.tar

  run-test:
    parameters:
#      from-tag:
#        type: string
      testsuites:
        type: string
    environment:
#      FROM_TAG: << parameters.from-tag >>
      TESTSUITES: << parameters.testsuites >>
    machine: true
    steps:
#      - docker/check:
#          docker-username: THIS_REGISTRY_USERNAME
#          docker-password: THIS_REGISTRY_PASSWORD
#          registry: $THIS_REGISTRY
      - run:
          name: Custom enviroment variables
          command: |
            #if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            #  echo 'export THIS_LABEL=${FROM_TAG}' >> ${BASH_ENV}
            #else 
            #  echo 'export THIS_LABEL=${FROM_TAG}-${CIRCLE_BRANCH}' >> ${BASH_ENV}
            #fi
            echo 'export TEST_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}-test:build' >> ${BASH_ENV}
            cat ${BASH_ENV}
      - checkout
      - attach_workspace:
         at: .
      - run:
          name: Run tests
          command: |
            docker load -i rip-video-test.tar
            ./test.sh
      - store_test_results:
          path: testResults
      - store_artifacts:
          path: testResults

  push-images:
    parameters:
      from-tag: 
        type: string
    environment:
      FROM_TAG: << parameters.from-tag >>
    machine: true
    steps:
      - attach_workspace:
         at: .
      - run:
          name: Custom enviroment variables
          command: |
            export BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:build
            export TEST_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}-test:build
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              #echo 'export THIS_LABEL=${FROM_TAG}' >> ${BASH_ENV}
              export THIS_LABEL=${FROM_TAG}
            else 
              #echo 'export THIS_LABEL=${FROM_TAG}-${CIRCLE_BRANCH}' >> ${BASH_ENV}
              export THIS_LABEL=${FROM_TAG}-${CIRCLE_BRANCH}
            fi
            docker load -i rip-video.tar
            docker tag ${BUILD_IMAGE} ${THIS_REGISTRY}/${THIS_IMAGE}:${THIS_LABEL}
            docker load -i rip-video-test.tar
            docker tag ${TEST_IMAGE ${THIS_REGISTRY}/${THIS_IMAGE}-test:${THIS_LABEL}
      - docker/check:
          docker-username: THIS_REGISTRY_USERNAME
          docker-password: THIS_REGISTRY_PASSWORD
          registry: $THIS_REGISTRY
      - docker/push:
          step-name: Push build image
          registry: $THIS_REGISTRY
          image: ${THIS_IMAGE}
          tag: ${THIS_LABEL}
      - docker/push:
          step-name: Push test image
          registry: $THIS_REGISTRY
          image: ${THIS_IMAGE}-test
          tag: ${THIS_LABEL}

workflows:
  default:
    jobs:
      - build-ripvideo:
          name: build-ripvideo-4.3-vaapi1804
          dockerfile: vaapi
          build-subtitle: true
          from-tag: 4.3-vaapi1804
      - build-test:
          name: build-test-4.3-vaapi1804
          requires:
            - build-ripvideo-4.3-vaapi1804
 #         from-tag: 4.3-vaapi1804
      - run-test:
          name: run-test-4.3-vaapi1804
          requires:
            - build-test-4.3-vaapi1804
#          from-tag: 4.3-vaapi1804
          testsuites: basic,deinterlace,audio,subtitles
      - push-images:
          requires:
            - run-test-4.3-vaapi1804
          from-tag: 4.3-vaapi1804
