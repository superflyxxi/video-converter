version: 2.1

orbs:
  docker: circleci/docker@2
  node: circleci/node@5
  php: circleci/php@1
  sonarcloud: sonarsource/sonarcloud@2
  snyk: snyk/snyk@2

anchors:
  node-executor: &node-executor
    name: node/default
    tag: '20.11'

jobs:

  build-phar:
    resource_class: small
    executor:
      name: php/default
      tag: "7.4"
    steps:
      - checkout
      - php/install-composer:
          install-version: 2.5.4
      - php/install-packages
      - run: composer run lint
      - run: composer run check-format -- --dry-run
      - run: rm -rvf vendor
      - php/install-packages:
          install-flags: "--no-interaction --prefer-dist --no-dev"
      - run: curl -o phar-composer -JL "https://github.com/clue/phar-composer/releases/download/v1.4.0/phar-composer-1.4.0.phar"
      - run:
          name: Build phar
          command: |
            php ./phar-composer --version
            php ./phar-composer build .
      - persist_to_workspace:
          root: ./
          paths:
            - video-converter.phar
      - store_artifacts:
          path: video-converter.phar

  snyk-scan:
    resource_class: small
    docker:
      - image: cimg/base:stable 
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Load docker images
          command: docker load -i /tmp/workspace/video-converter-images.tar
      - snyk/scan:
          docker-image-name: ${CIRCLE_PROJECT_REPONAME}:latest
          fail-on-issues: false

  build-docker:
    resource_class: small
    docker:
      - image: cimg/base:stable 
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Define cache env variables
          command: |
            echo "CACHE_REGISTRY=${GHCR_REGISTRY}" >> ${BASH_ENV}
            echo "CACHE_USERNAME=${GHCR_USERNAME}" >> ${BASH_ENV}
            echo "CACHE_PASSWORD=${GHCR_TOKEN}" >> ${BASH_ENV}
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Move phar to docker dir
          command: cp -v /tmp/workspace/video-converter.phar ./
      - run:
          name: Custom enviroment variables
          command: |
            export CACHE_FROM_IMAGES=$(grep "^FROM " Dockerfile.parent | sed 's/FROM //g' | sed 's/ AS .*$//g' | xargs echo | sed 's/ /,/g')
            export CACHE_ROOT_IMAGE="${CACHE_REGISTRY}/${CACHE_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            if ! [[ "<< pipeline.git.branch >>" =~ (main|dev) ]]; then
              export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${CACHE_ROOT_IMAGE}:dev"
            elif [[ "<< pipeline.git.branch >>" =~ (dev) ]]; then
              export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${CACHE_ROOT_IMAGE}:latest"
            fi
            export TEST_CACHE_FROM_IMAGES=$(grep "^FROM " tests/Dockerfile | sed 's/FROM //g' | sed 's/ AS .*$//g' | xargs echo | sed 's/ /,/g')
            if ! [[ "<< pipeline.git.branch >>" =~ (main|release-.*|dev) ]]; then
              export TEST_CACHE_FROM_IMAGES="${TEST_CACHE_FROM_IMAGES},${CACHE_ROOT_IMAGE}:test-dev"
            fi
            export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt)
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
            #VERSION="1.2.3"; PREV=${VERSION:0:1}; for A in $(echo ${VERSION:1} | tr "." "\n"); do NOW="$PREV.$A"; echo A=$A; echo PREV=${PREV}; echo caching=${NOW}; PREV=$NOW; done
              PREV=${PRIMARY_DOCKER_TAG:0:1}
              for A in $(echo ${PRIMARY_DOCKER_TAG:1} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${CACHE_ROOT_IMAGE}:${NOW}"
                PREV=$NOW
              done
            fi
            echo "export CACHE_FROM_IMAGES=${CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            echo "export TEST_CACHE_FROM_IMAGES=${TEST_CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: ${CACHE_REGISTRY}
          docker-username: CACHE_USERNAME
          docker-password: CACHE_PASSWORD
      - docker/build:
          step-name: Build parent image
          dockerfile: Dockerfile.parent
          image: ${CIRCLE_PROJECT_REPONAME}-parent
          tag: latest
          cache_from: ${CACHE_FROM_IMAGES}
      - docker/build:
          step-name: Build docker image
          image: ${CIRCLE_PROJECT_REPONAME}
          tag: latest
      - docker/build:
          step-name: Build test image
          docker-context: .
          path: .
          dockerfile: tests/Dockerfile
          image: test-${CIRCLE_PROJECT_REPONAME}
          tag: latest
          cache_from: ${TEST_CACHE_FROM_IMAGES}
          extra_build_args: --build-arg TEST_SAMPLE_DOMAIN=${TEST_SAMPLE_DOMAIN}
      - run:
          name: Run sanity test
          command: |
            docker volume create data
            docker run --rm -v data:/vol --entrypoint sh test-${CIRCLE_PROJECT_REPONAME} -c 'cp -v /data/dvd.mkv /vol/'
            docker run --rm -v data:/data -w /data ${CIRCLE_PROJECT_REPONAME} \
              --title=Test --video-format=copy --audio-format=copy --subtitle-format=copy dvd.mkv
      - run:
          name: Export images to tar
          command: |
            docker save -o video-converter-images.tar ${CIRCLE_PROJECT_REPONAME} test-${CIRCLE_PROJECT_REPONAME}
      - persist_to_workspace:
          root: ./
          paths:
            - video-converter-images.tar*

  publish-docker:
    resource_class: small
    docker:
      - image: cimg/base:stable 
    parameters:
      registry-env:
        description: The registry envirnment variable to use to publish docker images.
        type: string
        default: docker.io
      docker-username-env:
        description: The docker registry username env variable to use.
        type: string
        default: DOCKER_LOGIN
      docker-password-env:
        description: The docker registery password env variable to use.
        type: string
        default: DOCKER_PASSWORD
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Custom enviroment variables
          command: |
            export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt)
            echo "export PRIMARY_DOCKER_TAG=${PRIMARY_DOCKER_TAG}" >> ${BASH_ENV}
            export DOCKER_TAGS=${PRIMARY_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},main,latest"
            fi
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            echo "export FINAL_IMAGE_NAME=${<< parameters.docker-username-env >>}/${CIRCLE_PROJECT_REPONAME}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: ${<< parameters.registry-env >>}
          docker-password: << parameters.docker-password-env >>
          docker-username: << parameters.docker-username-env >>
      - run:
          name: Load docker images
          command: |
            docker load -i /tmp/workspace/video-converter-images.tar
      - run:
          name: Tag docker images for repos
          command: |
            IFS="," read -ra LOOP_TAGS \<<< "${DOCKER_TAGS}"
            set -x
            for TAG in "${LOOP_TAGS[@]}"; do
              docker tag ${CIRCLE_PROJECT_REPONAME} ${<< parameters.registry-env >>}/${FINAL_IMAGE_NAME}:${TAG}
            done
            docker tag test-${CIRCLE_PROJECT_REPONAME} ${<< parameters.registry-env >>}/${FINAL_IMAGE_NAME}:test-${PRIMARY_DOCKER_TAG} 
            set +x
      - docker/push:
          step-name: Pushing image to desired repo
          registry: ${<< parameters.registry-env >>}
          image: ${FINAL_IMAGE_NAME}
          tag: ${DOCKER_TAGS}
      - unless:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - docker/push:
                step-name: Pushing test image to desired repo
                registry: ${<< parameters.registry-env >>}
                image: ${FINAL_IMAGE_NAME}
                tag: test-${PRIMARY_DOCKER_TAG}

  test-docker:
    parallelism: 5
    resource_class: small
    docker:
      - image: cimg/base:stable 
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Load docker test image
          command: |
            docker load -i /tmp/workspace/video-converter-images.tar
      - run:
          name: Run tests
          command: |
            if [[ "<< pipeline.git.branch >>" != "main" ]]; then
              export ADDITIONAL_PHPUNIT_ARGS="--fail-on-warning --fail-on-risky";
            fi
            export TEST_IMAGE=test-${CIRCLE_PROJECT_REPONAME}
            export ALL_CLASSES=$(docker run --rm -it ${TEST_IMAGE} --list-tests | grep "^ -" | sed 's/ - \(.*\)::.*/\1/g' | uniq)
            export ALL_TESTCASES=$(docker run --rm -it ${TEST_IMAGE} --list-tests | grep "^ -" | sed 's/^ - .*::\(.*\)\r/\1/g' | sed 's/\(.*\)"\(.*\)"/\1 with data set "\2"/g')
            export CLASSES=$(echo "${ALL_CLASSES}" | circleci tests split --split-by=timings --timings-type=classname)
            export TESTCASES=$(echo "${ALL_TESTCASES}" | circleci tests split --split-by=timings --timings-type=testname)
            printf "All Testcases=%s\n\nRunning with=%s\n\n" "${ALL_TESTCASES}" "${TESTCASES}"
            printf "All Classes=%s\n\nRunning with=%s\n\n" "${ALL_CLASSES}" "${CLASSES}"
            if [[ $(echo ${ALL_CLASSES} | wc -w) -eq 0 ]]; then
              echo "Not enough classes. Something's wrong"
              exit 1
            fi
            ./test.sh
      - store_test_results:
          path: testResults/junitResults
      - store_artifacts:
          path: testResults
      - persist_to_workspace:
          root: testResults
          paths:
            - junitResults/junit-*.xml
            - clover-*.xml

  sonar-scan:
    resource_class: small
    executor: 
      name: node/default
      tag: '16.5.0'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Correct report files
          command: |
            npm install --include=dev junit-report-merger
            npx jrm junit.xml "junitResults/junit-*.xml"
            find . -name 'clover-*.xml' -type f -exec sed -i 's#/opt/video-converter/##g' {} \;
            sed -i 's#/opt/video-converter/##g' junit.xml 
      - store_artifacts:
          path: junit.xml
      - run:
          name: Configure sonar-project.properties
          command: |
            printf "sonar.php.coverage.reportPaths=%s\n" $(find . -name 'clover-*.xml' -type f | xargs echo | sed 's/ /,/g') >> sonar-project.properties
            cat sonar-project.properties
      - sonarcloud/scan

  release-notes:
    resource_class: small
    executor:
      name: node/default
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    steps:
      - checkout
      - run: npm install -D @semantic-release/exec
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            - run:
                name: Define additional args
                command: |
                  echo "ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          name: Semantic-release
          command: |
            npx semantic-release ${ADDITIONAL_ARGS}
            if [[ "" == "$(cat version.txt)" ]]; then 
              printf "%s-%s" ${CIRCLE_BRANCH} ${CIRCLE_SHA1:0:7} | sed 's#/#-#g' > /tmp/workspace/full_version.txt
              printf "${CIRCLE_BRANCH}" | sed 's#/#-#g' > /tmp/workspace/short_version.txt
            else
              cp -v version.txt /tmp/workspace/full_version.txt
              cp -v version.txt /tmp/workspace/short_version.txt
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - full_version.txt
            - short_version.txt

workflows:
  default:
    jobs:
      - release-notes:
          name: pre-release
          context: default
          prerelease: true
      - build-phar:
          context: default
      - docker/hadolint:
          name: validate-dockerfile
          context: default
          dockerfiles: Dockerfile:Dockerfile.parent:tests/Dockerfile
      - build-docker:
          context: default
          requires:
            - pre-release
            - validate-dockerfile
            - build-phar
      - publish-docker:
          name: publish-docker-private
          context: default
          registry-env: PRIVATE_DOCKER_REGISTRY
          docker-username-env: PRIVATE_DOCKER_USERNAME
          docker-password-env: PRIVATE_DOCKER_PASSWORD
          requires:
            - pre-release
            - build-docker
      - publish-docker:
          name: publish-docker-ghcr
          context: default
          registry-env: GHCR_REGISTRY
          docker-username-env: GHCR_USERNAME
          docker-password-env: GHCR_TOKEN
          requires:
            - pre-release
            - release-notes
            - build-docker
            - test-docker
          filters:
            branches:
              only:
                - main
                - dev
      - publish-docker:
          name: publish-docker-hub
          context: default
          registry-env: DOCKER_IO_REGISTRY
          docker-username-env: DOCKER_IO_USERNAME
          docker-password-env: DOCKER_IO_PASSWORD
          requires:
            - pre-release
            - release-notes
            - build-docker
            - test-docker
          filters:
            branches:
              only:
                - main
      - test-docker:
          context: default
          requires:
            - pre-release
            - build-docker
      - sonar-scan:
          context: default
          requires:
            - test-docker
      - snyk-scan:
          context: default
          requires:
            - test-docker
          filters:
            branches:
              ignore:
                - main
      - release-notes:
          name: release-notes
          context: default
          prerelease: false
          requires:
            - build-docker
            - test-docker
