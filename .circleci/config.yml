# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
    docker: circleci/docker@1.5.0

# Orchestrate or schedule a set of jobs
jobs:
  build:
    parameters:
      from-tag: 
        type: string
      dockerfile:
        type: string
      build-subtitle:
        type: boolean
    environment:
      DOCKERFILE: << parameters.dockerfile >>
      FROM_TAG: << parameters.from-tag >>
      BUILD_SUBTITLE_SUPPORT: << parameters.build-subtitle >>
      DEBIAN_FRONTEND: noninteractive
      
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Custom enviroment variables
          command: |
            echo 'export THIS_LABEL=$(cat /tmp/workspace/short_version.txt)-${FROM_TAG}' >> ${BASH_ENV}
            echo 'export THIS_FULL_IMAGE=${DOCKER_REGISTRY}/${THIS_IMAGE}:${THIS_LABEL}' >> ${BASH_ENV}
            echo 'export TEST_IMAGE=${DOCKER_REGISTRY}/${THIS_IMAGE}-test:${THIS_LABEL}' >> ${BASH_ENV}
            if [[ ! "${CIRCLE_BRANCH}" == "main" ]] && [[ ! ${CIRCLE_BRANCH} == v* ]]; then
              echo 'export CACHE_FROM_IMAGE=${DOCKER_REGISTRY}/${THIS_IMAGE}:${FROM_TAG}' >> ${BASH_ENV}
            fi
            echo 'export FROM_IMAGE=jrottenberg/ffmpeg:${FROM_TAG}' >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: $DOCKER_REGISTRY
      - docker/pull:
          images: ${FROM_IMAGE},${CACHE_FROM_IMAGE}
          ignore-docker-pull-error: true
      - checkout
      - run:
          name: Build docker image
          command: ./build.sh
      - docker/build:
          docker-context: tests/
          path: tests/
          image: ${THIS_IMAGE}-test
          tag: ${THIS_LABEL}
          registry: ${DOCKER_REGISTRY}
          extra_build_args: --build-arg BUILD_IMAGE=${DOCKER_REGISTRY}/${THIS_IMAGE}:${THIS_LABEL}
          step-name: Build unit test image
      - run:
          name: Run unit tests
          command: ./test.sh
      - store_test_results:
          path: testResults
      - store_artifacts:
          path: testResults
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Tag image as latest
                command: docker tag ${DOCKER_REGISTRY}/${THIS_IMAGE}:${THIS_LABEL} ${DOCKER_REGISTRY}/${THIS_IMAGE}:${FROM_TAG}
      - docker/push:
          step-name: Pushing actual image
          registry: $DOCKER_REGISTRY
          image: ${THIS_IMAGE}
          tag: ${THIS_LABEL},${FROM_TAG}
      - docker/push:
          step-name: Pushing unit test image
          registry: $DOCKER_REGISTRY
          image: ${THIS_IMAGE}-test
          tag: ${THIS_LABEL}
  release:
    docker:
      - image: circleci/node
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    steps:
      - checkout
      - run: npm install
      - run: npm install -D @semantic-release/exec
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            run:
              name: Define additional args
              command: |
                echo "ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          command: |
            npx semantic-release ${ADDITIONAL_ARGS}
            if [[ "" == "$(cat version.txt)" ]]; then 
              printf "%s-%s" ${CIRCLE_BRANCH} ${CIRCLE_SHA1:0:7} | sed 's#/#-#g' > /tmp/workspace/full_version.txt
              printf "${CIRCLE_BRANCH}" | sed 's#/#-#g' > /tmp/workspace/short_version.txt
            else
              cp -v version.txt /tmp/workspace/full_version.txt
              cp -v version.txt /tmp/workspace/short_version.txt
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - full_version.txt
            - short_version.txt

workflows:
  default:
    jobs:
      - release:
          name: pre-release
          context: default
          prerelease: true
      - build:
          name: build-test-push-4.3-vaapi1804
          context: default
          dockerfile: vaapi
          build-subtitle: true
          from-tag: 4.3-vaapi1804
          requires:
            - pre-release
      - release:
          name: release
          context: default
          prerelease: false
          requires:
            - build-test-push-4.3-vaapi1804
