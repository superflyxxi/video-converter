# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
    docker: circleci/docker@1

parameters:
  latest-from-tag:
    type: string
    default: '4.3-vaapi1804'

# Orchestrate or schedule a set of jobs
jobs:
  validate:
    machine: true
    steps:
      - checkout
      - run:
          name: Verify files
          command: docker run -v "$(pwd):/data" -e INPUT_PATH=/data -e INPUT_OPTIONS="-vvv -w"  overtrue/phplint:latest

  build:
    environment:
      DEBIAN_FRONTEND: noninteractive
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Custom enviroment variables
          command: |
            export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt)
            echo "export PRIMARY_DOCKER_TAG=${PRIMARY_DOCKER_TAG}" >> ${BASH_ENV}
            export CACHE_FROM_IMAGES=$(grep "^FROM " Dockerfile | sed 's/FROM //g')
            if [[ "<< pipeline.git.branch >>" != "main" ]]; then
              export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${DOCKER_REGISTRY}/${THIS_IMAGE}:latest"
            fi
            echo "export CACHE_FROM_IMAGES=${CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            export DOCKER_TAGS=${PRIMARY_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},latest"
            fi
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: $DOCKER_REGISTRY
      - docker/build:
          image: ${THIS_IMAGE}
          tag: ${DOCKER_TAGS}
          registry: ${DOCKER_REGISTRY}
          cache_from: ${CACHE_FROM_IMAGES}
          step-name: Build docker image
      - docker/build:
          docker-context: src/tests/
          path: src/tests/
          image: ${THIS_IMAGE}-test
          tag: ${PRIMARY_DOCKER_TAG}
          registry: ${DOCKER_REGISTRY}
          extra_build_args: --build-arg BUILD_IMAGE=${DOCKER_REGISTRY}/${THIS_IMAGE}:${PRIMARY_DOCKER_TAG}
          step-name: Build unit test image
      - docker/push:
          step-name: Pushing actual image
          registry: $DOCKER_REGISTRY
          image: ${THIS_IMAGE}
          tag: ${DOCKER_TAGS}
      - docker/push:
          step-name: Pushing unit test image
          registry: $DOCKER_REGISTRY
          image: ${THIS_IMAGE}-test
          tag: ${PRIMARY_DOCKER_TAG}
      - run:
          name: Run unit tests
          command: |
            export TEST_IMAGE=${DOCKER_REGISTRY}/${THIS_IMAGE}-test:${PRIMARY_DOCKER_TAG}
            ./test.sh
      - store_test_results:
          path: testResults
      - store_artifacts:
          path: testResults

  release:
    docker:
      - image: circleci/node
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    steps:
      - checkout
      - run: npm install -D @semantic-release/exec
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            run:
              name: Define additional args
              command: |
                echo "ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          name: Semantic-release
          command: |
            npx semantic-release ${ADDITIONAL_ARGS}
            if [[ "" == "$(cat version.txt)" ]]; then 
              printf "%s-%s" ${CIRCLE_BRANCH} ${CIRCLE_SHA1:0:7} | sed 's#/#-#g' > /tmp/workspace/full_version.txt
              printf "${CIRCLE_BRANCH}" | sed 's#/#-#g' > /tmp/workspace/short_version.txt
            else
              cp -v version.txt /tmp/workspace/full_version.txt
              cp -v version.txt /tmp/workspace/short_version.txt
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - full_version.txt
            - short_version.txt

workflows:
  default:
    jobs:
      - release:
          name: pre-release
          context: default
          prerelease: true
      - validate:
          context: default
      - build:
          name: build-test-push
          context: default
          requires:
            - pre-release
            - validate
      - release:
          name: release
          context: default
          prerelease: false
          requires:
            - build-test-push
          filters:
            branches:
              only:
                - main
