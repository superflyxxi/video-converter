# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
    docker: circleci/docker@1.5.0

# Orchestrate or schedule a set of jobs
jobs:
  build:
    parameters:
      from-tag: 
        type: string
      dockerfile:
        type: string
      build-subtitle:
        type: boolean
    environment:
      DOCKERFILE: << parameters.dockerfile >>
      FROM_TAG: << parameters.from-tag >>
      BUILD_SUBTITLE_SUPPORT: << parameters.build-subtitle >>
      DEBIAN_FRONTEND: noninteractive
      
    machine: true
    steps:
      - run:
          name: Custom enviroment variables
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              echo 'export THIS_LABEL=${FROM_TAG}' >> ${BASH_ENV}
            else 
              echo 'export THIS_LABEL=${FROM_TAG}-${CIRCLE_BRANCH}' >> ${BASH_ENV}
            fi
            echo 'export THIS_FULL_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:${THIS_LABEL}' >> ${BASH_ENV}
            if [[ ! "${CIRCLE_BRANCH}" == "master" ]] && [[ ! ${CIRCLE_BRANCH} == v* ]]; then
              echo 'export CACHE_FROM_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:${FROM_TAG}' >> ${BASH_ENV}
            fi
            echo 'export FROM_IMAGE=jrottenberg/ffmpeg:${FROM_TAG}' >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          docker-username: THIS_REGISTRY_USERNAME
          docker-password: THIS_REGISTRY_PASSWORD
          registry: $THIS_REGISTRY
      - docker/pull:
          images: ${FROM_IMAGE},${CACHE_FROM_IMAGE}
          ignore-docker-pull-error: true
      - checkout
      - run:
          name: Build docker image
          command: ./build.sh
      - docker/build:
          docker-context: tests/
          path: tests/
          image: test
          tag: latest
          extra_build_args: --build-arg BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:${THIS_LABEL}
          step-name: Build test image
      - run:
          name: Run tests
          command: ./test.sh
      - store_test_results:
          path: testResults
      - store_artifacts:
          path: testResults
      - docker/push:
          registry: $THIS_REGISTRY
          image: ${THIS_IMAGE}
          tag: ${THIS_LABEL}
workflows:
  default:
    jobs:
      - build:
          name: build-4.3-vaapi1804
          dockerfile: vaapi
          build-subtitle: true
          from-tag: 4.3-vaapi1804
