# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  docker: circleci/docker@1
  node: circleci/node@4
  php: circleci/php@1

parameters:
  latest-from-tag:
    type: string
    default: "4.3-vaapi1804"

# Orchestrate or schedule a set of jobs
jobs:
  validate-format:
    executor:
      name: node/default
      tag: "16.10"
    steps:
      - checkout
      - run: npm install prettier @prettier/plugin-php
      - run: npx prettier src/ --check

  build-phar:
    executor:
      name: php/default
      tag: "7.2"
    steps:
      - checkout
      - php/install-composer
      - php/install-packages
      - run: composer run-script lint
      - run: rm -rvf vendor
      - php/install-packages:
          install-flags: "--no-interaction --prefer-dist --no-dev"
      - run: curl -o phar-composer -JL "https://github.com/clue/phar-composer/releases/download/v1.2.0/phar-composer-1.2.0.phar"
      - run:
          name: Build phar
          command: |
            php ./phar-composer --version
            php ./phar-composer build .
      - persist_to_workspace:
          root: ./
          paths:
            - video-converter.phar
      - store_artifacts:
          path: video-converter.phar

  build-docker:
    environment:
      DEBIAN_FRONTEND: noninteractive
    executor: docker/machine
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Move phar to docker dir
          command: cp -v /tmp/workspace/video-converter.phar ./
      - run:
          name: Custom enviroment variables
          command: |
            export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt)
            echo "export PRIMARY_DOCKER_TAG=${PRIMARY_DOCKER_TAG}" >> ${BASH_ENV}
            export CACHE_FROM_IMAGES=$(grep "^FROM " Dockerfile | sed 's/FROM //g')
            if [[ "<< pipeline.git.branch >>" != "main" ]]; then
              export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${DOCKER_REGISTRY}/${THIS_IMAGE}:latest"
            fi
            echo "export CACHE_FROM_IMAGES=${CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            export DOCKER_TAGS=${PRIMARY_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},latest"
            fi
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: $DOCKER_REGISTRY
      - docker/build:
          image: ${THIS_IMAGE}
          tag: ${DOCKER_TAGS}
          registry: ${DOCKER_REGISTRY}
          cache_from: ${CACHE_FROM_IMAGES}
          step-name: Build docker image
      - docker/push:
          step-name: Pushing image
          registry: $DOCKER_REGISTRY
          image: ${THIS_IMAGE}
          tag: ${DOCKER_TAGS}
      - run:
          name: Export tar
          command: |
            docker save -o video-converter.tar ${DOCKER_REGISTRY}/${THIS_IMAGE}:${PRIMARY_DOCKER_TAG}
            gzip -v video-converter.tar
      - persist_to_workspace:
          root: ./
          paths:
            - video-converter.tar.gz

  test-docker:
    environment:
      DEBIAN_FRONTEND: noninteractive
    executor: docker/machine
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Custom enviroment variables
          command: |
            echo "export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt)" >> ${BASH_ENV}
      - run:
          name: Load docker image
          command: |
            gunzip -v /tmp/workspace/video-converter.tar.gz
            docker load -i /tmp/workspace/video-converter.tar
      - docker/build:
          docker-context: .
          path: .
          dockerfile: tests/Dockerfile
          image: ${THIS_IMAGE}-test
          tag: ${PRIMARY_DOCKER_TAG}
          registry: ${DOCKER_REGISTRY}
          extra_build_args: --build-arg BUILD_IMAGE=${DOCKER_REGISTRY}/${THIS_IMAGE}:${PRIMARY_DOCKER_TAG}
          step-name: Build test image
      - unless:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - docker/check:
                registry: $DOCKER_REGISTRY
            - docker/push:
                step-name: Pushing test image
                registry: $DOCKER_REGISTRY
                image: ${THIS_IMAGE}-test
                tag: ${PRIMARY_DOCKER_TAG}
      - run:
          name: Run tests
          command: |
            if [[ "<< pipeline.git.branch >>" != "main" ]]; then
              export ADDITIONAL_PHPUNIT_ARGS="--fail-on-warning --fail-on-risky";
            fi
            export TEST_IMAGE=${DOCKER_REGISTRY}/${THIS_IMAGE}-test:${PRIMARY_DOCKER_TAG}
            ./test.sh
      - store_test_results:
          path: testResults
      - store_artifacts:
          path: testResults

  release:
    docker:
      - image: circleci/node
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    steps:
      - checkout
      - run: npm install -D @semantic-release/exec
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            run:
              name: Define additional args
              command: |
                echo "ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          name: Semantic-release
          command: |
            npx semantic-release ${ADDITIONAL_ARGS}
            if [[ "" == "$(cat version.txt)" ]]; then 
              printf "%s-%s" ${CIRCLE_BRANCH} ${CIRCLE_SHA1:0:7} | sed 's#/#-#g' > /tmp/workspace/full_version.txt
              printf "${CIRCLE_BRANCH}" | sed 's#/#-#g' > /tmp/workspace/short_version.txt
            else
              cp -v version.txt /tmp/workspace/full_version.txt
              cp -v version.txt /tmp/workspace/short_version.txt
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - full_version.txt
            - short_version.txt

workflows:
  cicd:
    jobs:
      - release:
          name: pre-release
          context: default
          prerelease: true
      - validate-format:
          context: default
      - build-phar:
          context: default
      - docker/hadolint:
          name: validate-dockerfile
          context: default
      - build-docker:
          context: default
          requires:
            - pre-release
            - validate-dockerfile
            - validate-format
            - build-phar
      - test-docker:
          context: default
          requires:
            - pre-release
            - build-docker
      - release:
          name: release
          context: default
          prerelease: false
          requires:
            - build-docker
            - test-docker
          filters:
            branches:
              only:
                - main
