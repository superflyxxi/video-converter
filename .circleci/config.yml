# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
    docker: circleci/docker@1.5.0

# Orchestrate or schedule a set of jobs
jobs:
  build-images:
    parameters:
      from-tag: 
        type: string
      dockerfile:
        type: string
      build-subtitle:
        type: boolean
    environment:
      DOCKERFILE: << parameters.dockerfile >>
      FROM_TAG: << parameters.from-tag >>
      BUILD_SUBTITLE_SUPPORT: << parameters.build-subtitle >>
    machine: true
    steps:
      - run:
          name: Custom enviroment variables
          command: |
            echo 'export BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:build' >> ${BASH_ENV}
            if [[ ! "${CIRCLE_BRANCH}" == "master" ]] && [[ ! ${CIRCLE_BRANCH} == v* ]]; then
              echo 'export CACHE_FROM_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:${FROM_TAG}' >> ${BASH_ENV}
            fi
            echo 'export FROM_IMAGE=jrottenberg/ffmpeg:${FROM_TAG}' >> ${BASH_ENV}
            echo 'export TEST_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}-test:build' >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          docker-username: THIS_REGISTRY_USERNAME
          docker-password: THIS_REGISTRY_PASSWORD
          registry: $THIS_REGISTRY
      - docker/pull:
          images: ${FROM_IMAGE},${CACHE_FROM_IMAGE}
          ignore-docker-pull-error: true
      - checkout
      - run:
          name: Build image
          command: ./build.sh
      - run:
          name: Download sample files
          command: |
            mkdir downloaded
            curl -L -o downloaded/dvd.mkv "https://${TEST_SAMPLE_DOMAIN}/samples/DVD_Sample.mkv"
            curl -L -o downloaded/bluray.mkv "https://${TEST_SAMPLE_DOMAIN}/samples/Bluray_Sample.mkv"
            chmod ugo+r downloaded/*
      - docker/build:
          docker-context: tests/
          path: tests/
          image: ${THIS_IMAGE}-test
          tag: build
          extra_build_args: --build-arg BUILD_IMAGE=${BUILD_IMAGE}
          registry: ${THIS_REGISTRY}
          step-name: Build test image
      - run:
         name: Export images to tar
         command: docker save -o images.tar ${TEST_IMAGE} ${BUILD_IMAGE}
      - persist_to_workspace:
          root: .
          paths: 
            - images.tar
            - ./downloaded/

  build-test:
    machine: true
    steps:
      - run:
          name: Custom enviroment variables
          command: |
            echo 'export BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:build' >> ${BASH_ENV}
            echo 'export TEST_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}-test:build' >> ${BASH_ENV}
      - checkout
      - attach_workspace:
         at: .
      - run:
         name: Load build image
         command: docker load -i images.tar
      - docker/build:
          docker-context: tests/
          path: tests/
          image: ${THIS_IMAGE}-test
          tag: build
          extra_build_args: --build-arg BUILD_IMAGE=${BUILD_IMAGE}
          registry: ${THIS_REGISTRY}
          step-name: Build test image
      - run:
         name: Extract test image
         command: docker save -o images.tar ${TEST_IMAGE} ${BUILD_IMAGE}
      - persist_to_workspace:
          root: .
          paths:
            - images.tar

  run-test:
    parameters:
      testsuites:
        type: string
    environment:
      TESTSUITES: << parameters.testsuites >>
    machine: true
    steps:
      - run:
          name: Custom enviroment variables
          command: |
            echo 'export TEST_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}-test:build' >> ${BASH_ENV}
            cat ${BASH_ENV}
      - checkout
      - attach_workspace:
         at: .
      - run:
          name: Restore images
          command: docker load -i images.tar
      - run:
          name: Run testsuite
          command: SAMPLES_DIR=$(pwd)/downloaded ./test.sh
      - store_test_results:
          path: testResults
      - store_artifacts:
          path: testResults

  push-images:
    parameters:
      from-tag: 
        type: string
    environment:
      FROM_TAG: << parameters.from-tag >>
    machine: true
    steps:
      - attach_workspace:
         at: .
      - run:
          name: Custom enviroment variables
          command: |
            echo 'export BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:build' >> ${BASH_ENV}
            echo 'export TEST_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}-test:build' >> ${BASH_ENV}
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              echo 'export THIS_LABEL=${FROM_TAG}' >> ${BASH_ENV}
            else 
              echo 'export THIS_LABEL=${FROM_TAG}-${CIRCLE_BRANCH}' >> ${BASH_ENV}
            fi
            cat ${BASH_ENV}
      - run:
          name: Restore images and tag
          command: |
            set -x
            docker load -i images.tar
            docker tag ${BUILD_IMAGE} ${THIS_REGISTRY}/${THIS_IMAGE}:${THIS_LABEL}
            docker tag ${TEST_IMAGE} ${THIS_REGISTRY}/${THIS_IMAGE}-test:${THIS_LABEL}
      - docker/check:
          docker-username: THIS_REGISTRY_USERNAME
          docker-password: THIS_REGISTRY_PASSWORD
          registry: $THIS_REGISTRY
      - docker/push:
          step-name: Push build image
          registry: $THIS_REGISTRY
          image: ${THIS_IMAGE}
          tag: ${THIS_LABEL}
      - docker/push:
          step-name: Push test image
          registry: $THIS_REGISTRY
          image: ${THIS_IMAGE}-test
          tag: ${THIS_LABEL}

workflows:
  default:
    jobs:
      - build-images:
          name: build-images-4.3-vaapi1804
          dockerfile: vaapi
          build-subtitle: true
          from-tag: 4.3-vaapi1804
#      - build-test:
#          name: build-test-4.3-vaapi1804
#          requires:
#            - build-ripvideo-4.3-vaapi1804
      - run-test:
          name: test-basic-4.3-vaapi1804
          requires:
            - build-images-4.3-vaapi1804
          testsuites: basic
      - run-test:
          name: test-deinterlace-detection-4.3-vaapi1804
          requires:
            - build-images-4.3-vaapi1804
          testsuites: deinterlace-detection
      - run-test:
          name: test-deinterlace-mode-4.3-vaapi1804
          requires:
            - build-images-4.3-vaapi1804
          testsuites: deinterlace-mode
      - run-test:
          name: test-audio-4.3-vaapi1804
          requires:
            - build-images-4.3-vaapi1804
          testsuites: audio
      - run-test:
          name: test-subtitles-4.3-vaapi1804
          requires:
            - build-images-4.3-vaapi1804
          testsuites: subtitles
      - push-images:
          requires:
            - test-basic-4.3-vaapi1804
            - test-deinterlace-detection-4.3-vaapi1804
            - test-deinterlace-mode-4.3-vaapi1804
            - test-audio-4.3-vaapi1804
            - test-subtitles-4.3-vaapi1804
          from-tag: 4.3-vaapi1804
